generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["interactiveTransactions", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model ReplicacheClient {
  // --- PUBLIC ID ---
  clientId       String @unique
  // --- FIELDS ---
  lastMutationId Int
}

// Replicache syncs “spaces”, i.e. groups of related data (such as to-dos and their connected categories)
model Space {
  // --- PUBLIC ID ---
  spaceId String @unique
  // --- RELATIONS ---
  Todos   Todo[] @relation("RSpaceToTodos")
  User    User   @relation("RUserToSpaces", fields: [userId], references: [userId], onDelete: Cascade)
  userId  String
  // --- FIELDS ---
  version Int    @default(0)
}

model Todo {
  // --- SYSTEM ---
  versionUpdatedAt Int     @default(0)
  // --- PUBLIC ID ---
  todoId           String  @unique
  // --- RELATIONS ---
  Space            Space   @relation("RSpaceToTodos", fields: [spaceId], references: [spaceId], onDelete: Cascade)
  spaceId          String
  // --- FIELDS ---
  isArchived       Boolean @default(false)
  isDraft          Boolean @default(false)
  isDeleted        Boolean @default(false)
  name             String?
  sortOrder        Int     @default(0)
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // --- PUBLIC ID ---
  userId    String   @unique
  // --- RELATIONS ---
  Spaces    Space[]  @relation("RUserToSpaces")
  // --- FIELDS ---
  email     String   @unique
}
